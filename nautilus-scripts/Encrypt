#!/usr/bin/env python3
# encyrpt file given as first argument
#
# This version overwites the source file with the result. In this way there is only one file used, and Nautilus does not
# get confused and select an unrelated file.
#
# The encryption result is currently held in memory before the overwrite, which could be a problem if the source
# file is very large.  It would be better to create a /tmp file, then copy that for the overwrite step.  For very large
# files, the result should be moved back, but then the highlighted selection in nautilus must jump to a different file.

import sys
import subprocess
import os

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk

def message(mess):
  dlg = Gtk.MessageDialog(
    message_type=Gtk.MessageType.ERROR
    ,buttons=Gtk.ButtonsType.OK
    ,text=mess
    )
  dlg.set_title('Encrypt Info')
  dlg.run()
  dlg.destroy()

def run(command):
  #print("command: " ,command)   
  proc = subprocess.Popen(
    command
    ,stdout = subprocess.PIPE
    ,stderr = subprocess.PIPE
  )
  stdout, stderr = proc.communicate()
  # print("stdout: ", len(stdout) ," " ,stdout)
  # print("stderr: ", len(stderr) ," " ,stderr)
  # print("proc.returncode: ", proc.returncode)
  return proc.returncode, stdout, stderr

file_src = sys.argv[1]
if not os.path.exists(file_src):
  message("file not found: " + file_src)
  sys.exit(1)
if os.path.getsize(file_src) > 2**30:
  message("beyond current Nautilus Encrypt file size limit of 1 gigbyte")
  sys.exit(1)

file_dst = sys.argv[1] + ".gpg"

key_ids = [
         "thomas-key-2911@reasoningtechnology.com"
         ,"shihju@reasoningtechnology.com"
         ]

command = ["gpg2" ,"--quiet" ,"--encrypt" ,"--output" ,"-"]
for id in key_ids:
  command.append("-r")
  command.append(id)
command.append(file_src)
code ,stdout ,stderr = run(command)

# if all went well, the encrypted data is in stdout
if code == 0:
  if not os.path.exists(file_dst):
    os.rename(file_src ,file_dst) 
    with open(file_dst ,"wb") as f:
      f.write(stdout)
  else:
    message(file_dst + " already exists")

if len(stderr) > 0:
  message(stderr.decode("utf-8"))



