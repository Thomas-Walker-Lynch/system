#!/usr/bin/env python3
# decrypt file given as first argument
#
# This version overwrites the source file with the result. In this way there is only one file used, and Nautilus does not
# get confused  and select an unrelated file.
#
# The decryption result is held in memory before the overwrite, which could be a problem if the source
# file is very large. It would be better to create a /tmp file, then copy that for the overwrite step. For very large
# files, the result should be moved back, but then the highlighted selection in nautilus must jump to a different file.

import sys
import subprocess
import os

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk

def message(mess):
  dlg = Gtk.MessageDialog(
    message_type=Gtk.MessageType.ERROR
    ,buttons=Gtk.ButtonsType.OK
    ,text=mess
    )
  dlg.set_title('Decrypt Info')
  dlg.run()
  dlg.destroy()

def run(command):
  #print("command: " ,command)   
  proc = subprocess.Popen(
    command
    ,stdout = subprocess.PIPE
    ,stderr = subprocess.PIPE
  )
  stdout, stderr = proc.communicate()
  # print("stdout: ", len(stdout) ," " ,stdout)
  # print("stderr: ", len(stderr) ," " ,stderr)
  # print("proc.returncode: ", proc.returncode)
  return proc.returncode, stdout, stderr


file_src = sys.argv[1] 
if not os.path.exists(file_src):
  message("file not found: " + file_src)
  sys.exit(1)
if os.path.getsize(file_src) > 2**30:
  message("beyond current Nautilus Decrypt file size limit of 1 gigabyte")
  sys.exit(1)


ext = file_src[ -4:]

if ext == ".gpg":
  file_dst = file_src[0:-4]
  code ,stdout ,stderr = run(["/usr/bin/gpg2" ,"--quiet" ,"--output" ,"-" ,"--decrypt" ,file_src])
  # if all went well, the decrypted data is in stdout
  if code == 0:
    if not os.path.exists(file_dst):
      os.rename(file_src ,file_dst) 
      with open(file_dst ,"wb") as f:
        f.write(stdout)
    else:
      message(file_dst + " already exists")

  if len(stderr) > 0:
     message(stderr.decode("utf-8"))
   

  
